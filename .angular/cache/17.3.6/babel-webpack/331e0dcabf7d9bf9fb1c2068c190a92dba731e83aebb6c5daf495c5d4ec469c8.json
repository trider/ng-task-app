{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { gql } from 'apollo-angular';\nimport { ModalWizardDialogComponent } from 'src/app/components/wizards/modals/modal-wizard-dialog/modal-wizard-dialog.component';\nimport { HttpHeaders } from '@angular/common/http';\nimport { InStateRead } from 'src/app/services/instate/schema/query';\nimport { InStateRun } from 'src/app/services/instate/schema/mutations';\nimport { StandardModalComponent } from 'src/app/components/dialogs/modals/standard-modal/standard-modal.component';\nconst MEMBER_LOAN_QUOTE = gql`{  memberLoanQuote @client }`;\nconst MEMBER_INVESTMENT_REQUEST = gql`{  memberInvestmentRequest @client }`;\nlet NavMenuTasksComponent = class NavMenuTasksComponent {\n  constructor(memberService, apollo, loggerService, modalService, configService, operatorService, dialog, tablesService) {\n    this.memberService = memberService;\n    this.apollo = apollo;\n    this.loggerService = loggerService;\n    this.modalService = modalService;\n    this.configService = configService;\n    this.operatorService = operatorService;\n    this.dialog = dialog;\n    this.tablesService = tablesService;\n    this.role = null;\n    this.rowName = \"rowData\";\n    this.isRow = false;\n    this.updateMemberTasksCountEvent = new EventEmitter();\n    this.updateOperatorTasksCountEvent = new EventEmitter();\n    this.loading = false;\n    this.memberData = null;\n    this.operatorData = null;\n    this.flowablePath = null;\n    this.flowableCommandPath = null;\n    this.tasks = null;\n    this.ticket = null;\n    this.tasksCount = 0;\n    this.updatingTask = false;\n    this.selectedTaskId = null;\n    this.showDetails = false;\n    this.row = null;\n    this.members = null;\n    this.file = null;\n    this.currQuoteId = null;\n    this.variables = null;\n    this.request = null;\n    this.rowData = null;\n    this.token = null;\n    this.command = 'getOperatorTaskRequests';\n    this.memberData = this.memberService.getMemberData();\n    this.token = this.memberData.token;\n    if (this.role === 'operator') {\n      this.operatorData = this.operatorService.getOperatorData();\n      this.token = this.operatorData.token;\n    }\n    if (this.token !== null) localStorage.setItem('token', this.token);\n    this.flowablePath = this.configService.config.flowableAPI;\n    this.flowableCommandPath = `${this.configService.config.flowableTasksAPI}/tasks`;\n  }\n  ngOnInit() {\n    let payload = null;\n    if (this.role === 'member') {\n      this.command = 'getMemberTasks';\n      payload = {\n        memberId: this.memberData.member,\n        projectName: this.memberData.projectName,\n        crmId: this.memberData.crmId,\n        analyticsAccount: this.memberData.analyticsAccount\n      };\n    } else if (this.role === 'operator') {\n      this.operatorData = this.operatorService.getOperatorData();\n      payload = {\n        projectName: 'instate',\n        assignee: \"admin\",\n        account: this.operatorData.account,\n        requestActivation: false\n      };\n    }\n    if (payload !== null) this.getTasks(payload);\n  }\n  getTasks(payload) {\n    this.qry = this.apollo.watchQuery({\n      query: InStateRead,\n      pollInterval: 3000,\n      context: {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: this.token,\n          token: this.token\n        })\n      },\n      variables: {\n        key: this.token,\n        role: this.role,\n        command: this.command,\n        payload: payload\n      }\n    });\n    this.querySubscription = this.qry.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      setTimeout(() => {\n        this.loggerService.logData(true, `Tasks:${this.role}`, data.inStateRead);\n        this.tasks = data.inStateRead;\n        if (this.tasks !== null && this.tasks.length > 0) this.tasksCount = this.tasks.length;\n        // if(this.role==='member')this.onboardMember()\n        this.updateTaskCount(this.role);\n      });\n    }, error => {\n      this.loggerService.logData(false, 'NavMenuTasksComponentErr:114', error);\n      this.qry.refetch();\n    });\n  }\n  updateTaskCount(role = 'operator') {\n    if (role === 'member') {\n      this.updateMemberTasksCountEvent.emit(this.tasksCount);\n    } else if (this.role === 'operator') {\n      this.updateOperatorTasksCountEvent.emit(this.tasksCount);\n    }\n  }\n  onboardMember() {\n    if (this.tasks.filter(res => res.taskDefinitionKey === 'onboardMemberAccount' && res.assignee === this.memberData.member)) {\n      try {\n        const task = this.tasks.reduce(acc => {\n          return this.tasks.filter(res => res.taskDefinitionKey === 'onboardMemberAccount' && res.assignee === this.memberData.member).reduce(arr => arr.concat(acc));\n        });\n        this.openDialog('member', task, 'onboardingMember');\n      } catch (error) {}\n    }\n  }\n  openDialog(role, task, controlType = 'approval', minWidth = 700, minHeight = 150, maxHeight = 750) {\n    let payload = null;\n    if (controlType === 'details') {\n      payload = {\n        controlType: controlType,\n        row: task\n      };\n      this.openStandardModal(role, task, payload, minWidth, minHeight, maxHeight);\n    } else if (controlType === 'approval') {\n      if (task.taskDefinitionKey === 'initiateRequestOnboard') {\n        // this.getProcessData(task)\n        let dialogRef = this.dialog.open(ModalWizardDialogComponent, {\n          minWidth: '900px',\n          minHeight: '250px',\n          maxWidth: '1500px',\n          maxHeight: '750px',\n          disableClose: false,\n          data: {\n            title: 'Approve Onboarding',\n            actionType: 'Administration',\n            selectedAction: 'Admin Onboarding',\n            setOpen: false,\n            isNew: false,\n            stepNum: 1,\n            lastStep: 2,\n            task: task\n          }\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          if (result.approveTask !== undefined && result.approveTask) this.completeTask(task);\n        });\n      } else {\n        if (task.taskDefinitionKey === 'approveTransfer') {\n          payload = {\n            ticketName: 'Approve Transfer',\n            requestName: 'ProcessWalletCashTransferFundsIOU',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n        } else if (task.taskDefinitionKey === 'approveRepayAllLoans') {\n          payload = {\n            title: 'Repay Loans:Approve',\n            ticketName: 'Loan Repayments',\n            requestName: 'Approve Repayments',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n          minWidth = 950;\n          maxHeight = minWidth;\n        } else if (task.taskDefinitionKey === 'approvePayoutProduct') {\n          payload = {\n            title: 'Product Payout:Approve',\n            ticketName: 'Product Payout',\n            requestName: 'Approve Payout',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n          maxHeight = minWidth;\n        } else if (task.taskDefinitionKey === 'loanRequestApprove') {\n          payload = {\n            ticketName: 'Price Loan',\n            requestName: 'Loan Request',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n        } else if (task.taskDefinitionKey === 'loanMemberApproval') {\n          payload = {\n            ticketName: 'Approve Task',\n            requestName: 'Loan Request',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n          minWidth = 850;\n          minHeight = 950;\n          maxHeight = 2000;\n        } else if (task.taskDefinitionKey === 'noteApprove') {\n          payload = {\n            ticketName: 'Approve Note',\n            requestName: 'Note Request',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n        } else if (task.taskDefinitionKey === 'approveBatchPNote') {\n          minWidth = 750;\n          // maxHeight=minWidth\n          payload = {\n            ticketName: 'Approve Batch Request',\n            requestName: 'Batch Request',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n        } else if (task.taskDefinitionKey === 'approveInvestment') {\n          payload = {\n            ticketName: 'Approve S-Note Request',\n            requestName: 'S-Note Request',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n        } else if (task.taskDefinitionKey === 'approveLoanTokenization') {\n          minWidth = 950;\n          payload = {\n            ticketName: 'Approve Loan Tokenization',\n            requestName: 'Loan Tokenization Request',\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n        } else if (task.taskDefinitionKey === 'approveHelpdeskTicket') {\n          minWidth = 950;\n          payload = {\n            ticketName: 'Approve Helpdesk Ticket',\n            requestName: task.taskDefinitionKey,\n            controlType: controlType,\n            showClose: false,\n            task: task\n          };\n        } else {\n          payload = {\n            controlType: controlType,\n            ticketName: 'Approve Task',\n            task: task\n          };\n          minWidth = 850;\n          minHeight = 950;\n          maxHeight = 2000;\n          this.loggerService.logData(false, `${payload.ticketName}Payload`, payload);\n        }\n        this.openStandardModal(role, task, payload, minWidth, minHeight, maxHeight);\n      }\n    }\n  }\n  openStandardModal(role, task, payload, minWidth, minHeight, maxHeight) {\n    this.tasks = this.tasks.filter(res => res.id !== task.id);\n    this.tasksCount = this.tasks.length - 1;\n    let dialogRef = this.dialog.open(StandardModalComponent, {\n      minWidth: minWidth,\n      minHeight: minHeight,\n      maxHeight: maxHeight,\n      disableClose: false,\n      data: payload\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      maxHeight = 2000;\n      this.loggerService.logData(true, 'result', result, true);\n      if (payload.ticketName === 'Price Loan') {\n        this.loggerService.logData(false, 'loanQuoteTrackUpdateResult', result);\n        // this.completeTask(task, role)\n        this.updateProcess(`${task.processInstanceUrl}/variables`, result, task);\n      }\n      if (result !== null && result.approveTask !== undefined) {\n        if (result.approveTask) this.completeTask(task);\n      }\n    });\n  }\n  getProcessData(task) {\n    this.apollo.mutate({\n      mutation: InStateRun,\n      variables: {\n        key: this.memberData.token,\n        role: 'operator',\n        command: \"operatorRunProcess\",\n        payload: {\n          ...task\n        }\n      }\n    }).subscribe(resp => {\n      if (resp !== null && resp.data[\"inStateRun\"] !== undefined) {\n        this.request = {};\n        resp.data[\"inStateRun\"].map(item => {\n          if (item.name === 'crmId' || item.name === 'crmTicketId') item.value = parseInt(item.value);\n          this.request[item.name] = item.value;\n        });\n        // this.loggerService.logData(false, 'getProcessData', resp.data[\"inStateRun\"])\n        this.loggerService.logData(false, 'getProcessRequest', this.request);\n        if (this.request !== null) this.getTicket(task);\n      }\n    }, error => {\n      this.loggerService.logData(false, 'walletErr', error);\n    });\n  }\n  getTicket(task) {\n    // alert(task.taskDefinitionKey)\n    this.qryTicket = this.apollo.watchQuery({\n      query: InStateRead,\n      // pollInterval: 500,\n      context: {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: this.memberData.token,\n          token: this.memberData.token\n        })\n      },\n      variables: {\n        key: this.memberData.token,\n        role: this.memberData.role,\n        command: \"getMemberCrmData\",\n        payload: {\n          model: \"helpdesk.ticket\",\n          query: {\n            id: this.request.crmTicketId\n          },\n          fields: []\n        }\n      }\n    });\n    this.querySubscriptionTicket = this.qryTicket.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      setTimeout(() => {\n        this.loading = loading;\n        this.loggerService.logData(false, 'ticket', data.inStateRead[0]);\n        this.ticket = data.inStateRead;\n        if (this.ticket !== null) {\n          let dialogRef = this.dialog.open(ModalWizardDialogComponent, {\n            minWidth: '900px',\n            minHeight: '250px',\n            maxWidth: '1500px',\n            maxHeight: '750px',\n            disableClose: false,\n            data: {\n              title: 'Approve Onboarding',\n              actionType: 'Administration',\n              selectedAction: 'Admin Onboarding',\n              setOpen: false,\n              isNew: false,\n              stepNum: 1,\n              lastStep: 2,\n              ticket: this.ticket,\n              task: task\n            }\n          });\n          dialogRef.afterClosed().subscribe(result => {\n            if (result.approveTask) {\n              this.changeTicketStatus(this.ticket, 'operator');\n              this.completeTask(task);\n            }\n          });\n        }\n        ;\n      });\n    }, error => {\n      this.loggerService.logData(false, 'quotesErr', error);\n    });\n  }\n  getCode() {\n    return this.tablesService.getCode(this.memberData.projectName, this.memberData.languageId);\n  }\n  getSymbol() {\n    return this.tablesService.getSymbol(this.memberData.projectName, this.memberData.languageId);\n  }\n  openWizard(actionType, selectedAction, size, stepNum = '') {\n    this.dialog.open(ModalWizardDialogComponent, {\n      minWidth: '700px',\n      minHeight: '250px',\n      disableClose: false,\n      data: {\n        actionType: actionType,\n        selectedAction: selectedAction,\n        setOpen: false,\n        isNew: false,\n        size: size,\n        stepNum: stepNum,\n        lastStep: '2'\n      }\n    });\n  }\n  openWizardDialog(role, task, actionType, selectedAction, title) {\n    let dialogRef = this.dialog.open(ModalWizardDialogComponent, {\n      minWidth: '850px',\n      minHeight: '250px',\n      maxHeight: '850px',\n      disableClose: false,\n      data: {\n        actionType: actionType,\n        selectedAction: selectedAction,\n        setOpen: false,\n        isNew: false,\n        title: title,\n        members: this.members\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // location.reload()\n      this.completeTask(task);\n    });\n  }\n  initiateOperatorApprovalTask(role, task, actionType, selectedAction) {\n    let dialogRef = this.dialog.open(ModalWizardDialogComponent, {\n      minWidth: '750px',\n      minHeight: '250px',\n      maxWidth: '1000px',\n      maxHeight: '750px',\n      disableClose: false,\n      data: {\n        actionType: actionType,\n        selectedAction: selectedAction,\n        setOpen: false,\n        isNew: false,\n        stepNum: 1,\n        lastStep: 2,\n        task: task\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result.approveTask) this.completeTask(task);\n    });\n  }\n  initiateAdminOnboarding(role, ticket, actionType, selectedAction, title = \"Approve Onboarding\", task) {\n    this.loggerService.logData(false, 'initiateAdminOnboarding', ticket);\n    let dialogRef = this.dialog.open(ModalWizardDialogComponent, {\n      minWidth: '900px',\n      minHeight: '250px',\n      maxWidth: '1500px',\n      maxHeight: '750px',\n      disableClose: false,\n      data: {\n        title: title,\n        actionType: actionType,\n        selectedAction: selectedAction,\n        setOpen: false,\n        isNew: false,\n        stepNum: 1,\n        lastStep: 2,\n        ticket: ticket\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result.approveTask) {\n        this.changeTicketStatus(ticket, role);\n        this.completeTask(task);\n      }\n    });\n  }\n  changeTicketStatus(ticket, role = \"operator\") {\n    this.apollo.mutate({\n      mutation: InStateRun,\n      variables: {\n        key: this.memberData.token,\n        role: this.memberData.role,\n        command: \"memberCrmUpdate\",\n        payload: {\n          model: \"helpdesk.ticket\",\n          id: ticket.id,\n          data: {\n            stage_id: 4\n          }\n        }\n      }\n    }).subscribe(resp => {\n      this.loggerService.logData(false, 'onboarding', resp);\n      this.tasks = this.tasks.filter(res => res.id !== ticket.id);\n      this.tasksCount = this.tasksCount - 1;\n      this.updateTaskCount(role);\n      this.qry.refetch();\n    }, error => {\n      this.loggerService.logData(false, 'walletErr', error);\n    });\n  }\n  updateProcess(url, result, task, role = \"operator\") {\n    this.apollo.mutate({\n      mutation: InStateRun,\n      variables: {\n        key: this.token,\n        role: this.memberData.role,\n        command: \"runFlowableCommandMember\",\n        path: url,\n        authorization: this.configService.config.flowableAuth,\n        payload: [{\n          name: \"acceptedQuoteTrackId\",\n          value: result.track.track\n        }, {\n          name: \"interestRate\",\n          value: result.track.interest_rate.toString()\n        }, {\n          name: \"termAmount\",\n          value: result.term.toString()\n        }]\n      }\n    }).subscribe(resp => {\n      this.loggerService.logData(true, `updateProcess`, resp);\n      this.completeTask(task);\n    }, error => {});\n  }\n  completeTask(task) {\n    // alert(task.url)\n    this.performAction({\n      key: this.memberData.token,\n      role: this.memberData.role,\n      command: \"runFlowableCommandMember\",\n      payload: {\n        path: task.url,\n        authorization: this.configService.config.flowableAuth,\n        payLoad: {\n          action: 'complete'\n        }\n      }\n    });\n  }\n  performAction(variables) {\n    // alert()\n    this.loggerService.logData(true, `Payload`, variables);\n    this.apollo.mutate({\n      mutation: InStateRun,\n      variables: variables\n    }).subscribe(resp => {\n      this.loggerService.logData(true, `Resp`, resp);\n      this.qry.refetch();\n    }, error => {});\n  }\n  ngOnDestroy() {\n    try {\n      this.querySubscription.unsubscribe();\n    } catch (error) {}\n  }\n};\n__decorate([Input(), Input()], NavMenuTasksComponent.prototype, \"role\", void 0);\n__decorate([Input()], NavMenuTasksComponent.prototype, \"rowName\", void 0);\n__decorate([Input()], NavMenuTasksComponent.prototype, \"isRow\", void 0);\n__decorate([Output()], NavMenuTasksComponent.prototype, \"updateMemberTasksCountEvent\", void 0);\n__decorate([Output()], NavMenuTasksComponent.prototype, \"updateOperatorTasksCountEvent\", void 0);\nNavMenuTasksComponent = __decorate([Component({\n  selector: 'app-nav-menu-tasks',\n  templateUrl: './nav-menu-tasks.component.html',\n  styleUrls: ['./nav-menu-tasks.component.scss']\n})], NavMenuTasksComponent);\nexport { NavMenuTasksComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}