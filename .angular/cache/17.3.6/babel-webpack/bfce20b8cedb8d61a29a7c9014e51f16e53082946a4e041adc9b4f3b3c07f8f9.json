{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let EventService = /*#__PURE__*/(() => {\n  class EventService {\n    constructor() {\n      this.handler = new Subject();\n    }\n    /**\n     * Broadcast the event\n     * @param type type of event\n     * @param payload payload\n     */\n    broadcast(type, payload = \"\") {\n      this.handler.next({\n        type,\n        payload\n      });\n    }\n    /**\n     * Subscribe to event\n     * @param type type of event\n     * @param callback call back function\n     */\n    subscribe(type, callback) {\n      return this.handler.pipe(filter(event => event.type === type)).pipe(map(event => event.payload)).subscribe(callback);\n    }\n    static #_ = this.ɵfac = function EventService_Factory(t) {\n      return new (t || EventService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EventService,\n      factory: EventService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EventService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}