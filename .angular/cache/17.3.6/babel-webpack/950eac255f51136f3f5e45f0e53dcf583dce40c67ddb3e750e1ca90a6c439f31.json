{"ast":null,"code":"var TopbarComponent_1;\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { LEFT_SIDEBAR_TYPE_CONDENSED, LEFT_SIDEBAR_TYPE_DEFAULT } from '../config/layout.model';\nimport { gql } from 'apollo-angular';\nimport { TopbarMenu } from './topbarMenu';\nimport { TopBarProfileOptions } from './topBarProfileOptions';\nimport { ModalWizardDialogComponent } from '../../../components/wizards/modals/modal-wizard-dialog/modal-wizard-dialog.component';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Languages } from './languages';\nimport { HttpHeaders } from '@angular/common/http';\nimport { InStateRead } from 'src/app/services/instate/schema/query';\nimport { InStateRun } from 'src/app/services/instate/schema/mutations';\nimport { TableMemberDataVaultInstate } from 'src/app/common/tableData/member/accounts/tableMemberDataVaultInstate';\nimport { MENU_ADMIN } from './menu-admin';\nimport { StandardModalComponent } from 'src/app/components/dialogs/modals/standard-modal/standard-modal.component';\nconst MEMBER_DATA = gql`{  memberData @client }`;\nconst MEMBER_LOAN_QUOTE = gql`{  memberLoanQuote @client }`;\nconst MEMBER_INVESTMENT_REQUEST = gql`{  memberInvestmentRequest @client }`;\nconst MEMBER_ACCOUNTS = gql`{  memberAccounts @client }`;\nconst USER_LOGIN_STATUS = gql`{  userLoginStatus @client }`;\nconst USER_LOGIN_PROGRESS = gql`{  userLoginProgress @client }`;\n;\nconst MEMBER_DLT_ACCOUNT = gql`{  memberDLTAccount @client }`;\nlet TopbarComponent = TopbarComponent_1 = class TopbarComponent {\n  constructor(router, eventService, memberService, apollo, loggerService, modalService, configService, dialog, operatorService, tablesService) {\n    this.router = router;\n    this.eventService = eventService;\n    this.memberService = memberService;\n    this.apollo = apollo;\n    this.loggerService = loggerService;\n    this.modalService = modalService;\n    this.configService = configService;\n    this.dialog = dialog;\n    this.operatorService = operatorService;\n    this.tablesService = tablesService;\n    this.layoutType = '';\n    this.leftSidebarTheme = 'light';\n    this.rowName = \"rowData\";\n    this.isRow = true;\n    this.memberId = 'member';\n    this.mobileMenuButtonClicked = new EventEmitter();\n    this.settingsButtonClicked = new EventEmitter();\n    this.textDir = 'rtl';\n    this.createMenuOptions = TopbarComponent_1;\n    this.megaMenuItems = [];\n    this.notificationList = [];\n    this.languages = Languages;\n    this.apps = TopbarMenu;\n    this.profileOptions = TopBarProfileOptions;\n    this.searchResults = [];\n    this.searchUsers = [];\n    this.memberData = null;\n    this.operatorData = null;\n    this.projectName = 'instate';\n    this.loggedInUser = null;\n    this.topnavCollapsed = false;\n    this.title = 'Details';\n    this.loading = false;\n    this.selectedTaskId = null;\n    this.memberWallet = null;\n    this.memberCash = 0;\n    this.selectedTaskIdAdmin = null;\n    this.row = null;\n    this.file = null;\n    this.members = null;\n    this.messages = null;\n    this.messageCount = 0;\n    this.messagesTotal = 0;\n    this.messagesMember = null;\n    this.messageCountMember = 0;\n    this.messagesTotalMember = 0;\n    this.messagesOperator = null;\n    this.messageCountOperator = 0;\n    this.messagesTotalOperator = 0;\n    this.flowablePath = null;\n    this.flowableCommandPath = null;\n    this.loanQuotes = null;\n    this.loanSaleQuotes = null;\n    this.pNoteRequests = null;\n    this.fundUnitRequests = null;\n    this.sNoteRequests = null;\n    this.tasks = null;\n    this.tasksAdmin = null;\n    this.approvedCount = 0;\n    this.approvedCountAdmin = 0;\n    this.updatingTask = false;\n    this.role = 'member';\n    this.progressVal = 0;\n    this.temp = null;\n    this.currQuoteId = null;\n    this.filterForm = new FormGroup({\n      search: new FormControl()\n    });\n    this.dltAccount = null;\n    this.accounts = null;\n    this.baseTableCols = TableMemberDataVaultInstate;\n    this.token = '1111111';\n    this.account = null;\n    this.memberAdminMenu = MENU_ADMIN;\n    this.balance = 0;\n    this.balanceDlt = 0;\n    this.isOnboarded = false;\n    this.isOnboardedWallet = false;\n    this.balanceColor = 'silver';\n    this.balanceForm = new FormGroup({\n      balance: new FormControl(0)\n    });\n    this.class = 'navbar-custom-payton';\n    document.addEventListener('fullscreenchange', this.exitHandler);\n    document.addEventListener(\"webkitfullscreenchange\", this.exitHandler);\n    document.addEventListener(\"mozfullscreenchange\", this.exitHandler);\n    this.role = localStorage.getItem('role');\n    this.memberData = this.memberService.getMemberData();\n    this.operatorData = this.operatorService.getOperatorData();\n    this.flowablePath = this.configService.config.flowableAPI;\n    this.flowableCommandPath = `${this.configService.config.flowableTasksAPI}/tasks`;\n    this.selectedLanguage = this.languages[0];\n    if (this.memberData.dlt !== null && this.memberData.dlt !== undefined) this.dltAccount = [this.memberData.dlt];\n    try {\n      this.projectName = localStorage.getItem('projectName');\n      this.token = localStorage.getItem('token');\n      if (this.role === 'member') {\n        this.token = this.memberData.token;\n        this.projectName = this.memberData.projectName;\n      } else if (this.role === 'operator') {\n        this.token = this.operatorData.token;\n        this.projectName = this.operatorData.projectName;\n      }\n      localStorage.setItem('projectName', this.projectName);\n    } catch (error) {\n      this.projectName = 'instate';\n      this.token = '111111';\n    }\n  }\n  ngOnInit() {\n    this.getLanguage();\n    if (this.memberData.projectName !== 'upecos') {\n      this.baseTableCols = this.baseTableCols.map(col => {\n        if (col.name === 'Custom' && this.memberData.customToken !== undefined && this.memberData.customToken !== null) {\n          col.name = this.memberData.customToken.value;\n          col.field = this.memberData.customToken.symbol;\n        }\n        return col;\n      });\n      this.getDLTDataIns();\n    } else if (this.memberData.projectName === 'upecos') {\n      this.getMemberDltYhd();\n    }\n  }\n  getLanguage() {\n    try {\n      if (this.memberData !== null && this.memberData.languageId !== undefined) this.selectedLanguage = this.languages.reduce(acc => {\n        return this.languages.filter(res => res.id === this.memberData.languageId).reduce(arr => arr.concat(acc));\n      });\n    } catch (error) {\n      this.selectedLanguage = this.languages[0];\n      this.qry.refetch();\n    }\n  }\n  updateMemberMessageCount(messageCountMember) {\n    try {\n      this.messageCountMember = messageCountMember;\n    } catch (error) {}\n  }\n  updateOperatorMessageCount(messageCountOperator) {\n    try {\n      this.messageCountOperator = messageCountOperator;\n    } catch (error) {}\n  }\n  updateMemberTasksCount(approvedCount) {\n    this.approvedCount = approvedCount;\n  }\n  updateOperatorTasksCount(approvedCountAdmin) {\n    this.approvedCountAdmin = approvedCountAdmin;\n  }\n  setMember(member) {\n    this.memberData = member;\n    this.router.navigate(['/member/dashboard']);\n    if (this.memberData.projectName !== 'instate') {\n      this.getDLTDataIns();\n    } else if (this.memberData.projectName === 'upecos') {\n      this.getMemberDltYhd();\n    }\n    // this.memberData = this.memberService.getMemberData()\n  }\n  setMembers(members) {\n    this.members = members;\n  }\n  getCode() {\n    return this.tablesService.getCode(this.memberData.projectName, this.memberData.languageId);\n  }\n  getSymbol() {\n    return this.tablesService.getSymbol(this.memberData.projectName, this.memberData.languageId);\n  }\n  getDLTDataIns() {\n    this.qry = this.apollo.watchQuery({\n      query: InStateRead,\n      pollInterval: 60000,\n      context: {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: this.memberData.token,\n          token: this.memberData.token\n        })\n      },\n      variables: {\n        key: this.memberData.token,\n        role: this.memberData.role,\n        command: \"getMemberDltAccount\",\n        payload: {\n          path: \"accounts\",\n          currency: 'USD',\n          memberId: this.memberData.member,\n          projectName: \"instate\",\n          crmId: this.memberData.crmId\n        }\n      }\n    });\n    this.querySubscription = this.qry.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      this.loading = loading;\n      this.loggerService.logData(false, 'topBarDlt', data);\n      setTimeout(() => {\n        this.dltAccount = data.inStateRead;\n        if (this.dltAccount !== null) {\n          this.balance = this.dltAccount.balance;\n          this.dltAccount = [data.inStateRead];\n          this.apollo.client.writeQuery({\n            query: MEMBER_DLT_ACCOUNT,\n            data: {\n              memberDLTAccount: data.inStateRead\n            }\n          });\n          const qry = this.apollo.client.readQuery({\n            query: MEMBER_DLT_ACCOUNT\n          });\n          this.loggerService.logData(false, 'OperatorAccountsDltNetworkComponent:111', qry);\n          this.loggerService.displayMessage('DLT data updated', 2500, true);\n          this.updated = new Date().toJSON().toString().replace('T', ' ').slice(0, 19);\n        }\n      });\n    }, error => {\n      this.loggerService.logData(false, 'quotesErr', error);\n      this.qry.refetch();\n    });\n  }\n  getMemberDltYhd() {\n    if (this.isOnboardedWallet) {\n      this.qry = this.apollo.watchQuery({\n        query: InStateRead,\n        // pollInterval: 60000,\n        context: {\n          headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n            Authorization: this.memberData.token,\n            token: this.memberData.token\n          })\n        },\n        variables: {\n          key: this.memberData.token,\n          role: this.memberData.role,\n          command: \"getMemberDltWallet\",\n          payload: {\n            memberId: this.memberData.member,\n            projectName: \"instate\",\n            isSummary: true\n          }\n        }\n      });\n      this.querySubscription = this.qry.valueChanges.subscribe(({\n        data,\n        loading\n      }) => {\n        this.loggerService.logData(false, 'topBarDlt', data);\n        this.loading = false;\n        setTimeout(() => {\n          this.account = data.inStateRead;\n          if (this.account !== null) {\n            this.apollo.client.writeQuery({\n              query: MEMBER_DLT_ACCOUNT,\n              data: {\n                memberDLTAccount: data.inStateRead\n              }\n            });\n            const qry = this.apollo.client.readQuery({\n              query: MEMBER_DLT_ACCOUNT\n            });\n            this.loggerService.logData(false, 'OperatorAccountsDltNetworkComponent:111', qry);\n            this.loggerService.displayMessage('DLT data updated', 2500, true);\n            // this.balance = this.account.balance\n            this.balance = this.account.transactionTotal;\n          }\n        });\n      }, error => {\n        this.loggerService.logData(false, 'quotesErr', error);\n        // this.qry.refetch()\n      });\n    }\n  }\n  openProductPage(notification) {\n    if (notification.product === 'wallet') {\n      this.router.navigate(['/member/accounts/wallet']);\n    } else if (notification.product === 'loan') {\n      this.router.navigate(['/member/accounts/loans']);\n    } else if (notification.product === 'p-note' || notification.product === 's-note' || notification.product === 'fund-unit') {\n      this.router.navigate(['/member/accounts/investments']);\n    } else {\n      if (notification.path !== null && notification.path.length > 0) this.router.navigate([notification.path]);\n    }\n  }\n  openPage(path) {\n    if (path !== null && path.length > 0) this.router.navigate([path]);\n  }\n  openWizard(actionType, selectedAction, size, stepNum = '') {\n    this.dialog.open(ModalWizardDialogComponent, {\n      minWidth: '700px',\n      minHeight: '250px',\n      disableClose: false,\n      data: {\n        actionType: actionType,\n        selectedAction: selectedAction,\n        setOpen: true,\n        isNew: true,\n        size: size,\n        stepNum: stepNum,\n        lastStep: '2'\n      }\n    });\n  }\n  onSubmit() {\n    const formData = this.filterForm.value;\n    const name = formData.search.toLowerCase();\n    this.members = this.temp;\n    this.members = this.members.filter(res => res.member.toLowerCase().includes(name) || res.accountName.toLowerCase().includes(name));\n  }\n  clearSearch() {\n    this.members = this.temp;\n  }\n  selectLanguage(language) {\n    this.selectedLanguage = language;\n    let memberData = {\n      ...this.memberData\n    };\n    memberData.languageId = this.selectedLanguage.id;\n    sessionStorage.setItem('memberData', JSON.stringify(memberData));\n    location.reload();\n    this.apollo.mutate({\n      mutation: InStateRun,\n      variables: {\n        key: this.memberData.token,\n        role: this.memberData.role,\n        command: \"memberDataUpdate\",\n        payload: {\n          db: \"graphDB\",\n          collection: \"membersList\",\n          query: {\n            member: this.memberData.member\n          },\n          payload: {\n            languageId: this.selectedLanguage.id\n          }\n        }\n      }\n    }).subscribe(resp => {\n      this.loggerService.displayMessage('Member Data Updated', 2000, true);\n      this.loggerService.logData(false, 'memberData', resp);\n      this.loading = false;\n      try {\n        location.reload();\n      } catch (error) {\n        this.router.navigate([`/${this.role}/dashboard`]);\n      }\n    }, error => {\n      this.loggerService.logData(false, 'TopbarComponent:540', error);\n    });\n  }\n  openModal(content, row) {\n    this.row = row;\n    this.modalService.open(content, {\n      size: 'lg',\n      scrollable: true\n    });\n  }\n  openModalVault(content) {\n    this.modalService.open(content, {\n      size: 'xl',\n      centered: true,\n      scrollable: true\n    });\n  }\n  openModalFile(content, file) {\n    this.file = file;\n    this.modalService.open(content, {\n      size: 'xl',\n      centered: true,\n      scrollable: true\n    });\n  }\n  getAccountPath(val) {\n    if (val.tableType === 'wallet') {\n      return `accounts/${val.item.name}/cash`;\n    } else if (val.tableType === 'loans') {\n      return `tables/obligation?borrower=${val.item.name}`;\n    } else if (val.tableType === 'pNotes') {\n      return `tables/claim?investor=${val.item.name}`;\n    } else if (val.tableType === 'fundUnits') {\n      return `tables/claim?investor=${val.item.name}`;\n    }\n  }\n  openProfilePage() {\n    // this.router.navigate(['/administration/accounts/clients/client', this.clientAccount.account.id])\n  }\n  openDialogDLT(val, controlType = 'dltMember', minWidth = 700, minHeight = 350) {\n    let payload = null;\n    this.modalService.dismissAll();\n    if (controlType === 'details') {\n      payload = {\n        controlType: controlType,\n        showClose: true,\n        row: val\n      };\n    } else {\n      minWidth = 1250, payload = {\n        controlType: controlType,\n        // showClose:true,\n        id: val.item.name,\n        title: val.tableType,\n        tableType: val.tableType,\n        investment: val.item,\n        path: this.getAccountPath(val)\n      };\n    }\n    this.openStandardModal(payload, minWidth, minHeight);\n  }\n  openDialog(actionType, selectedAction, data = null, size, stepNum = '') {\n    this.dialog.open(ModalWizardDialogComponent, {\n      minWidth: '700px',\n      minHeight: '250px',\n      autoFocus: true,\n      disableClose: false,\n      data: {\n        actionType: actionType,\n        selectedAction: selectedAction,\n        setOpen: true,\n        isNew: false,\n        size: size,\n        stepNum: stepNum,\n        lastStep: '2'\n      }\n    });\n    // dialogRef.afterClosed().subscribe(result => {});\n  }\n  openStandardModal(payload, minWidth, minHeight) {\n    let dialogRef = this.dialog.open(StandardModalComponent, {\n      minWidth: minWidth,\n      minHeight: minHeight,\n      disableClose: false,\n      data: payload\n    });\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n  getAccount(content, account) {\n    // this.apollo.client.writeQuery({ query: MEMBER_DATA, data: { memberData: null } })\n    this.loggerService.logData(false, 'account', account);\n    this.memberData = this.operatorData.members.memberList.reduce(acc => {\n      return this.operatorData.members.memberList.filter(res => res.member === account.member).reduce(arr => arr.concat(acc));\n    });\n    this.loggerService.logData(false, 'memberData', this.memberData);\n    this.modalService.open(content, {\n      centered: true,\n      scrollable: true\n    });\n    localStorage.setItem('userEmail', this.memberData.email);\n    let payload = {};\n    payload.email = this.memberData.email;\n    payload.password = this.memberData.password;\n    payload.role = 'member';\n    payload.analyticsAccount = this.memberData.analyticsAccount;\n    payload.isLogin = false;\n    // sessionStorage.removeItem('memberData')\n    sessionStorage.setItem('memberData', JSON.stringify(this.memberData));\n    // this.operatorService.memberLogin(payload)\n    this.apollo.client.writeQuery({\n      query: USER_LOGIN_STATUS,\n      data: {\n        userLoginStatus: 'Member Credentials:Authenticated'\n      }\n    });\n    this.apollo.client.writeQuery({\n      query: USER_LOGIN_PROGRESS,\n      data: {\n        userLoginProgress: 100\n      }\n    });\n    this.memberData = this.memberService.getMemberData();\n    this.router.navigate(['/operator/dashboard']);\n    location.reload();\n  }\n  getStatus() {\n    const qry = this.apollo.client.readQuery({\n      query: USER_LOGIN_STATUS\n    });\n    return qry.userLoginStatus;\n  }\n  getProgress() {\n    const qry = this.apollo.client.readQuery({\n      query: USER_LOGIN_PROGRESS\n    });\n    this.progressVal = parseInt(qry.userLoginProgress.toString());\n    if (this.progressVal > 95) this.modalService.dismissAll();\n    return parseInt(qry.userLoginProgress.toString());\n  }\n  changeSidebarWidth() {\n    if (document.body.hasAttribute('data-sidebar-size') && document.body.getAttribute('data-sidebar-size') === \"condensed\") {\n      this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_DEFAULT);\n    } else {\n      this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_CONDENSED);\n    }\n  }\n  exitHandler() {\n    let document = window.document;\n    if (!document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\n      document.body.classList.remove('fullscreen-enable');\n    }\n  }\n  toggleFullScreen() {\n    let document = window.document;\n    document.body.classList.toggle('fullscreen-enable');\n    let elem = document.querySelector('.maximize-icon');\n    if (elem.hasAttribute('data-toggle') && document.body.getAttribute('data-toggle') === \"fullscreen\") {\n      document.body.removeAttribute('data-toggle');\n    } else {\n      elem.setAttribute('data-toggle', 'fullscreen');\n    }\n    if (!document.fullscreenElement && /* alternative standard method */!document.mozFullScreenElement && !document.webkitFullscreenElement) {\n      // current working methods\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen();\n      } else if (document.documentElement.mozRequestFullScreen) {\n        document.documentElement.mozRequestFullScreen();\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        document.documentElement.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n      }\n    }\n  }\n  toggleRightSidebar() {\n    this.settingsButtonClicked.emit();\n  }\n  toggleMobileMenu(event) {\n    this.topnavCollapsed = !this.topnavCollapsed;\n    event.preventDefault();\n    this.mobileMenuButtonClicked.emit();\n  }\n  ngOnDestroy() {\n    try {\n      this.querySubscription.unsubscribe();\n    } catch (error) {}\n  }\n};\n__decorate([Input()], TopbarComponent.prototype, \"layoutType\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"leftSidebarTheme\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"rowName\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"isRow\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"memberId\", void 0);\n__decorate([Output()], TopbarComponent.prototype, \"mobileMenuButtonClicked\", void 0);\n__decorate([Output()], TopbarComponent.prototype, \"settingsButtonClicked\", void 0);\nTopbarComponent = TopbarComponent_1 = __decorate([Component({\n  selector: 'app-topbar',\n  templateUrl: './topbar.component.html',\n  styleUrls: ['./topbar.component.scss']\n})], TopbarComponent);\nexport { TopbarComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}