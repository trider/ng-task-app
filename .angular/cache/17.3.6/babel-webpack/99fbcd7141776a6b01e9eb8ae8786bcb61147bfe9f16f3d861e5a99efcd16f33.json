{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { gql } from 'apollo-angular';\nimport { UntypedFormGroup, UntypedFormControl } from '@angular/forms';\nimport { HttpHeaders } from '@angular/common/http';\nimport { InStateRead } from 'src/app/services/instate/schema/query';\nimport { InStateRun } from 'src/app/services/instate/schema/mutations';\nimport { StandardModalComponent } from 'src/app/components/dialogs/modals/standard-modal/standard-modal.component';\nconst USER_LOGIN_STATUS = gql`{  userLoginStatus @client }`;\nconst USER_LOGIN_PROGRESS = gql`{  userLoginProgress @client }`;\nconst OPERATOR_MEMBERS = gql`{  operatorMembers @client }`;\nconst MEMBER_DATA = gql`{  memberData @client }`;\nlet NavMemberSearchComponent = class NavMemberSearchComponent {\n  constructor(router, eventService, memberService, apollo, loggerService, modalService, configService, dialog, operatorService) {\n    this.router = router;\n    this.eventService = eventService;\n    this.memberService = memberService;\n    this.apollo = apollo;\n    this.loggerService = loggerService;\n    this.modalService = modalService;\n    this.configService = configService;\n    this.dialog = dialog;\n    this.operatorService = operatorService;\n    this.rowName = \"rowData\";\n    this.isRow = true;\n    this.mobileMenuButtonClicked = new EventEmitter();\n    this.settingsButtonClicked = new EventEmitter();\n    this.setOperatorMemberEvent = new EventEmitter();\n    this.setOperatorMembersEvent = new EventEmitter();\n    this.textDir = 'rtl';\n    this.searchResults = [];\n    this.searchUsers = [];\n    this.memberData = null;\n    this.member = null;\n    this.operatorData = null;\n    this.projectName = 'instate';\n    this.loggedInUser = null;\n    this.flowablePath = null;\n    this.flowableCommandPath = null;\n    this.role = 'member';\n    this.temp = null;\n    this.progressVal = 0;\n    this.loading = false;\n    this.isOnboarded = false;\n    this.isOnboardedWallet = false;\n    this.row = null;\n    this.file = null;\n    this.members = null;\n    this.token = '111111111';\n    this.filterForm = new UntypedFormGroup({\n      search: new UntypedFormControl()\n    });\n    this.token = localStorage.getItem('token');\n    this.role = localStorage.getItem('role');\n    this.flowablePath = this.configService.config.flowableAPI;\n    this.flowableCommandPath = `${this.configService.config.flowableTasksAPI}/tasks`;\n    this.memberData = this.memberService.getMemberData();\n    // this.token = this.memberData.token\n    if (this.role === 'operator') {\n      this.operatorData = this.operatorService.getOperatorData();\n      this.token = this.operatorData.token;\n    }\n    // try {\n    //   this.isOnboarded = Boolean(localStorage.getItem('isOnboarded'))\n    //   this.isOnboarded = Boolean(localStorage.getItem('isOnboardedWallet'))\n    // } catch (error) {\n    // }\n  }\n  ngOnInit() {\n    if (this.role === 'operator') {\n      this.qry = this.apollo.watchQuery({\n        query: InStateRead,\n        pollInterval: 60000,\n        context: {\n          headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n            Authorization: this.operatorData.token,\n            token: this.operatorData.token\n          })\n        },\n        variables: {\n          key: this.operatorData.token,\n          role: this.operatorData.role,\n          command: \"getOperatorMemberData\",\n          payload: {\n            projectName: this.operatorData.projectName\n          }\n        }\n      });\n      this.querySubscription = this.qry.valueChanges.subscribe(({\n        data,\n        loading\n      }) => {\n        setTimeout(() => {\n          try {\n            this.loading = loading;\n            this.loggerService.logData(true, 'memberList', data.inStateRead);\n            this.members = data.inStateRead.members;\n            this.temp = this.members;\n            this.setOperatorMembersEvent.emit(this.members);\n            this.apollo.client.writeQuery({\n              query: OPERATOR_MEMBERS,\n              data: {\n                OPERATOR_MEMBERS: this.members\n              }\n            });\n            const qry = this.apollo.client.readQuery({\n              query: OPERATOR_MEMBERS\n            });\n            this.loggerService.logData(true, 'memberAccountUpdateQry', qry);\n          } catch (error) {}\n        });\n      }, error => {\n        this.loggerService.logData(false, 'TopbarComponent:224', error);\n      });\n    }\n  }\n  onSubmit() {}\n  filterList(name) {\n    this.members = this.members.filter(res => res.name.toLowerCase().includes(name.toLowerCase()));\n    if (name === '') this.members = this.temp;\n  }\n  getStatus() {\n    const qry = this.apollo.client.readQuery({\n      query: USER_LOGIN_STATUS\n    });\n    return qry.userLoginStatus;\n  }\n  getProgress() {\n    const qry = this.apollo.client.readQuery({\n      query: USER_LOGIN_PROGRESS\n    });\n    this.progressVal = parseInt(qry.userLoginProgress.toString());\n    if (this.progressVal > 95) this.modalService.dismissAll();\n    return parseInt(qry.userLoginProgress.toString());\n  }\n  getAccount(content, account) {\n    this.apollo.client.writeQuery({\n      query: USER_LOGIN_PROGRESS,\n      data: {\n        userLoginProgress: 30\n      }\n    });\n    this.apollo.client.writeQuery({\n      query: USER_LOGIN_STATUS,\n      data: {\n        userLoginStatus: 'Updating'\n      }\n    });\n    this.modalService.open(content, {\n      centered: true,\n      scrollable: true\n    });\n    this.member = this.members.reduce(acc => {\n      return this.members.filter(res => res.member === account.member).reduce(arr => arr.concat(acc));\n    });\n    if (this.member !== null) {\n      this.loggerService.logData(false, 'member', this.member);\n      this.apollo.client.writeQuery({\n        query: USER_LOGIN_PROGRESS,\n        data: {\n          userLoginProgress: 70\n        }\n      });\n      this.apollo.client.writeQuery({\n        query: USER_LOGIN_STATUS,\n        data: {\n          userLoginStatus: `Switching to ${this.member.member}`\n        }\n      });\n      this.qryMember = this.apollo.watchQuery({\n        query: InStateRead,\n        pollInterval: 60000,\n        context: {\n          headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n            Authorization: this.memberData.token,\n            token: this.memberData.token\n          })\n        },\n        variables: {\n          key: this.memberData.token,\n          role: 'member',\n          command: \"getMember\",\n          payload: {\n            memberId: this.member.member\n          }\n        }\n      });\n      this.querySubscriptionMember = this.qryMember.valueChanges.subscribe(({\n        data,\n        loading\n      }) => {\n        setTimeout(() => {\n          this.loggerService.logData(true, 'memberData', data.inStateRead);\n          localStorage.setItem('userEmail', data.inStateRead.email);\n          location.reload();\n          // sessionStorage.removeItem('memberData')\n          sessionStorage.setItem('memberData', JSON.stringify(data.inStateRead));\n          this.apollo.client.writeQuery({\n            query: USER_LOGIN_STATUS,\n            data: {\n              userLoginStatus: 'Member Credentials:Authenticated'\n            }\n          });\n          this.apollo.client.writeQuery({\n            query: USER_LOGIN_PROGRESS,\n            data: {\n              userLoginProgress: 100\n            }\n          });\n          this.qry.refetch();\n          this.updateOperatorAccount(data.inStateRead);\n          // this.router.navigate(['/member/dashboard'])\n        });\n      }, error => {\n        this.loggerService.logData(false, 'TopbarComponent:224', error);\n      });\n    }\n  }\n  updateOperatorAccount(memberData) {\n    this.loading = true;\n    // For Non-Yahad projects, set project name to upecos to set operatorData.memberAccount\n    //TODO: Find fix for operatorData.memberAccount workaround\n    this.apollo.mutate({\n      mutation: InStateRun,\n      variables: {\n        key: this.operatorData.token,\n        role: this.operatorData.role,\n        command: \"operatorUpdate\",\n        payload: {\n          user_id: this.operatorData.user_id,\n          memberAccount: memberData.member,\n          isUpdate: true,\n          bankData: \"summary\",\n          projectName: 'upecos'\n        }\n      }\n    }).subscribe(resp => {\n      // this.loggerService.displayMessage('Operator Data Updated', 2000, true)\n      this.loggerService.logData(false, 'OperatorData', resp);\n      this.setOperatorMemberEvent.emit(memberData);\n      this.qry.refetch();\n      this.loading = false;\n    }, error => {});\n  }\n  openStandardModal(item, controlType = 'details') {\n    let dialogRef = this.dialog.open(StandardModalComponent, {\n      minWidth: 500,\n      maxHeight: 750,\n      disableClose: false,\n      data: {\n        controlType: controlType,\n        row: item\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n  clearSearch() {\n    this.members = this.temp;\n  }\n  ngOnDestroy() {\n    // this.querySubscription.unsubscribe()\n  }\n};\n__decorate([Input(), Input()], NavMemberSearchComponent.prototype, \"rowName\", void 0);\n__decorate([Input()], NavMemberSearchComponent.prototype, \"isRow\", void 0);\n__decorate([Output()], NavMemberSearchComponent.prototype, \"mobileMenuButtonClicked\", void 0);\n__decorate([Output()], NavMemberSearchComponent.prototype, \"settingsButtonClicked\", void 0);\n__decorate([Output()], NavMemberSearchComponent.prototype, \"setOperatorMemberEvent\", void 0);\n__decorate([Output()], NavMemberSearchComponent.prototype, \"setOperatorMembersEvent\", void 0);\nNavMemberSearchComponent = __decorate([Component({\n  selector: 'app-nav-member-search',\n  templateUrl: './nav-member-search.component.html',\n  styleUrls: ['./nav-member-search.component.scss']\n})], NavMemberSearchComponent);\nexport { NavMemberSearchComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}