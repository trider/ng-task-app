{"ast":null,"code":"import { changeBodyAttribute, getLayoutConfig } from '../../shared/helper/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/service/event.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../shared/right-sidebar/right-sidebar.component\";\nimport * as i5 from \"../../shared/footer/footer.component\";\nfunction DetachedLayoutComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6)(2, \"div\", 7);\n    i0.ɵɵelement(3, \"router-outlet\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(4, \"app-footer\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let DetachedLayoutComponent = /*#__PURE__*/(() => {\n  class DetachedLayoutComponent {\n    constructor(eventService) {\n      this.eventService = eventService;\n      this.layoutWidth = '';\n      this.menuPosition = \"\";\n      this.leftSidebarTheme = \"\";\n      this.leftSidebarType = \"\";\n      this.topbarTheme = \"\";\n      this.showSidebarUserInfo = false;\n      this.reRender = true;\n      /**\n       * controls re-rendering\n       */\n      this._setRerender = () => {\n        this.reRender = false;\n        setTimeout(() => {\n          this.reRender = true;\n        });\n      };\n    }\n    ngOnInit() {\n      let config = getLayoutConfig('detached');\n      this.menuPosition = config.menuPosition;\n      this.leftSidebarTheme = config.leftSidebarTheme;\n      this.leftSidebarType = config.leftSidebarType;\n      this.topbarTheme = config.topbarTheme;\n      this.showSidebarUserInfo = config.showSidebarUserInfo;\n      // listen to event and change the layout configuarations\n      this.eventService.subscribe('changeMenuPosition', position => {\n        this.menuPosition = position;\n      });\n      this.eventService.subscribe('changeLeftSidebarTheme', theme => {\n        this.leftSidebarTheme = theme;\n      });\n      this.eventService.subscribe('changeLeftSidebarType', type => {\n        this.leftSidebarType = type;\n      });\n      this.eventService.subscribe('changeTopbarTheme', theme => {\n        this.topbarTheme = theme;\n      });\n      this.eventService.subscribe('toggleLeftSidebarUserInfo', show => {\n        this.showSidebarUserInfo = show;\n      });\n      this.changeLayoutConfig();\n    }\n    /**\n     * On view init - activating horizontal layout\n     */\n    ngAfterViewInit() {\n      changeBodyAttribute('data-layout-mode', 'detached');\n    }\n    /**\n    * changes layout configurations\n    */\n    ngOnChanges(changes) {\n      this._setRerender();\n      this.changeLayoutConfig();\n    }\n    ngDoCheck() {\n      this.changeLayoutConfig();\n    }\n    ngOnDestroy() {\n      changeBodyAttribute('data-layout-mode', 'remove');\n    }\n    /**\n     * changes layout related options\n     */\n    changeLayoutConfig() {\n      // boxed vs fluid\n      changeBodyAttribute('data-layout-width', this.layoutWidth);\n      // scrollable menus\n      changeBodyAttribute('data-layout-menu-position', this.menuPosition);\n      // left sidebar theme\n      changeBodyAttribute('data-sidebar-color', this.leftSidebarTheme);\n      // left sidebar type\n      changeBodyAttribute('data-sidebar-size', this.leftSidebarType);\n      // topbar theme\n      changeBodyAttribute('data-topbar-color', this.topbarTheme);\n    }\n    /**\n     * on settings button clicked from topbar\n     */\n    onSettingsButtonClicked() {\n      this.eventService.broadcast('showRightSideBar');\n    }\n    /**\n     * On mobile toggle button clicked\n     */\n    onToggleMobileMenu() {\n      document.body.classList.toggle('sidebar-enable');\n    }\n    static #_ = this.ɵfac = function DetachedLayoutComponent_Factory(t) {\n      return new (t || DetachedLayoutComponent)(i0.ɵɵdirectiveInject(i1.EventService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DetachedLayoutComponent,\n      selectors: [[\"app-detached-layout\"]],\n      inputs: {\n        layoutWidth: \"layoutWidth\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 5,\n      vars: 8,\n      consts: [[\"id\", \"wrapper\"], [\"layoutType\", \"detached\", 3, \"settingsButtonClicked\", \"mobileMenuButtonClicked\"], [3, \"includeUserProfile\"], [\"class\", \"content-page\", 4, \"ngIf\"], [\"layoutType\", \"detached\", 3, \"layoutWidth\", \"menuPosition\", \"leftSidebarTheme\", \"leftSidebarType\", \"topbarTheme\", \"showSidebarUserInfo\"], [1, \"content-page\"], [1, \"content\"], [1, \"container-fluid\"]],\n      template: function DetachedLayoutComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-topbar\", 1);\n          i0.ɵɵlistener(\"settingsButtonClicked\", function DetachedLayoutComponent_Template_app_topbar_settingsButtonClicked_1_listener() {\n            return ctx.onSettingsButtonClicked();\n          })(\"mobileMenuButtonClicked\", function DetachedLayoutComponent_Template_app_topbar_mobileMenuButtonClicked_1_listener() {\n            return ctx.onToggleMobileMenu();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(2, \"app-left-sidebar\", 2);\n          i0.ɵɵtemplate(3, DetachedLayoutComponent_div_3_Template, 5, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"app-right-sidebar\", 4);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"includeUserProfile\", ctx.showSidebarUserInfo);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.reRender);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"layoutWidth\", ctx.layoutWidth)(\"menuPosition\", ctx.menuPosition)(\"leftSidebarTheme\", ctx.leftSidebarTheme)(\"leftSidebarType\", ctx.leftSidebarType)(\"topbarTheme\", ctx.topbarTheme)(\"showSidebarUserInfo\", ctx.showSidebarUserInfo);\n        }\n      },\n      dependencies: [i2.NgIf, i3.RouterOutlet, i4.RightSidebarComponent, i5.FooterComponent]\n    });\n  }\n  return DetachedLayoutComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}