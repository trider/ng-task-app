{"ast":null,"code":"import { HttpHeaders, Headers, Request, RequestOptions } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HttpClientService = /*#__PURE__*/(() => {\n  class HttpClientService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    getServiceData(url) {\n      return this.http.get(url);\n    }\n    postServiceData(url, payload) {\n      return this.http.post(url, payload, this.httpOptions);\n    }\n    _buildRequestOptions(method, url, body, tenant, username, accessToken, options) {\n      options = options || {};\n      const headers = new Headers();\n      if (!(body instanceof FormData)) {\n        headers.set('Accept', 'application/json');\n        headers.set('Content-Type', 'application/json');\n      }\n      headers.set(TENANT_HEADER, tenant);\n      headers.set(USER_HEADER, username);\n      headers.set(AUTHORIZATION_HEADER, accessToken);\n      const requestOptions = new RequestOptions({\n        method: method,\n        url: url,\n        body: body,\n        headers: headers\n      });\n      return requestOptions.merge(options);\n    }\n    createRequest(method, url, body, options, silent) {\n      return this.store.select(fromRoot.getAuthenticationState).take(1).map(state => this._buildRequestOptions(method, url, body, state.tenant, state.username, state.authentication.accessToken, options)).flatMap(requestOptions => {\n        this.process.next(Action.QueryStart);\n        const request = this.http.request(new Request(requestOptions)).catch(err => {\n          const error = err.json();\n          if (silent) {\n            return Observable.throw(error);\n          }\n          switch (error.status) {\n            case 409:\n              return Observable.throw(error);\n            case 401:\n            case 403:\n              this.store.dispatch({\n                type: LOGOUT\n              });\n              return Observable.throw('User is not authenticated');\n            default:\n              console.error('Error', error);\n              this.error.next(error);\n              return Observable.throw(error);\n          }\n        }).finally(() => this.process.next(Action.QueryStop));\n        return request.map(res => {\n          if (res.text()) {\n            try {\n              return res.json();\n            } catch (err) {\n              return res.text();\n            }\n          }\n        });\n      });\n    }\n    static #_ = this.ɵfac = function HttpClientService_Factory(t) {\n      return new (t || HttpClientService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpClientService,\n      factory: HttpClientService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return HttpClientService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}