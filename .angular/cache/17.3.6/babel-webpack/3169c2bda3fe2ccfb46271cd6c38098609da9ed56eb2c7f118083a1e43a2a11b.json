{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n      this.user = null;\n    }\n    /**\n     * Returns the current user\n     */\n    currentUser() {\n      if (!this.user) {\n        if (localStorage.role === 'member') {\n          this.user = JSON.parse(sessionStorage.getItem('memberData'));\n        } else {\n          this.user = JSON.parse(sessionStorage.getItem('operatorData'));\n        }\n      }\n      return this.user;\n    }\n    /**\n     * Performs the login auth\n     * @param email email of user\n     * @param password password of user\n     */\n    login(email, password) {\n      return this.http.post(`/api/login`, {\n        email,\n        password\n      }).pipe(map(user => {\n        // login successful if there's a jwt token in the response\n        if (user && user.token) {\n          this.user = user;\n          // store user details and jwt in session\n          // sessionStorage.setItem('currentUser', JSON.stringify(user));\n        }\n        return user;\n      }));\n    }\n    /**\n     * Performs the signup auth\n     * @param name name of user\n     * @param email email of user\n     * @param password password of user\n     */\n    signup(name, email, password) {\n      return this.http.post(`/api/signup`, {\n        name,\n        email,\n        password\n      }).pipe(map(user => user));\n    }\n    /**\n     * Logout the user\n     */\n    logout() {\n      // remove user from session storage to log user out\n      // localStorage.clear()\n      sessionStorage.removeItem('currentUser');\n      sessionStorage.removeItem('memberData');\n      sessionStorage.removeItem('operatorData');\n      this.user = null;\n    }\n    static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n      return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticationService,\n      factory: AuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}