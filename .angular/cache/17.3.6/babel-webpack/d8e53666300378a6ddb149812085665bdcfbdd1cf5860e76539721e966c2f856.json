{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { ModalWizardDialogComponent } from 'src/app/components/wizards/modals/modal-wizard-dialog/modal-wizard-dialog.component';\nimport { InStateRead } from 'src/app/services/instate/schema/query';\nimport { HttpHeaders } from '@angular/common/http';\nimport { gql } from 'apollo-angular';\nimport { MEGA_MENU_INS_PRODUCTS, MEGA_MENU_PAYTON_PRODUCTS, MEGA_MENU_INS_PRODUCTS_MEMBER } from './mega-menu-ins-products';\nimport { StandardModalComponent } from 'src/app/components/dialogs/modals/standard-modal/standard-modal.component';\nconst USER_LOGIN_STATUS = gql`{  userLoginStatus @client }`;\nconst USER_LOGIN_PROGRESS = gql`{  userLoginProgress @client }`;\nconst OPERATOR_MEMBERS = gql`{  operatorMembers @client }`;\nconst MEMBER_DATA = gql`{  memberData @client }`;\nlet MegaMenuComponent = class MegaMenuComponent {\n  constructor(router, dialog, memberService, apollo, loggerService, tableService) {\n    this.router = router;\n    this.dialog = dialog;\n    this.memberService = memberService;\n    this.apollo = apollo;\n    this.loggerService = loggerService;\n    this.tableService = tableService;\n    this.memberData = null;\n    this.members = null;\n    this.menuType = 'menu';\n    this.role = 'member';\n    this.menuItems = [];\n    this.closeMegaMenuEvent = new EventEmitter();\n    this.settingsButtonClicked = new EventEmitter();\n    this.mobileMenuButtonClicked = new EventEmitter();\n    this.cancelEvent = new EventEmitter();\n    this.isOnboarded = true;\n    this.isInStateAdmin = true;\n    this.isInStateAnalytics = true;\n    this.isInStateWallet = true;\n    this.isInStateWalletP2P = true;\n    this.isInStateWalletIOU = false;\n    this.isInStateWalletCustom = false;\n    this.isInStateLoanP2P = true;\n    this.isInStateLoanIOU = false;\n    this.isInStateLoanCustom = false;\n    this.isInStateLoans = true;\n    this.isInStateInvoices = true;\n    this.isInStateInvestments = true;\n    this.productName = null;\n    this.productType = 'P2P';\n    // productName:string = 'insLending'\n    this.productSet = null;\n    this.projectName = 'instate';\n    this.memberData = this.memberService.getMemberData();\n    this.productName = localStorage.getItem('productName');\n    this.projectName = localStorage.getItem('projectName');\n    this.token = localStorage.getItem('token');\n    this.role = localStorage.getItem('role');\n    this.productSet = JSON.parse(localStorage.getItem('productSet'));\n    this.menuItems = MEGA_MENU_INS_PRODUCTS.filter(res => res.show === true);\n    if (this.memberData.member !== 'member_operator_seed') this.menuItems = MEGA_MENU_INS_PRODUCTS_MEMBER.filter(res => res.show === true);\n    if (this.projectName === 'payton') this.menuItems = MEGA_MENU_PAYTON_PRODUCTS.filter(res => res.show === true);\n  }\n  ngOnInit() {\n    if (this.memberData !== null) {\n      this.qry = this.apollo.watchQuery({\n        query: InStateRead,\n        pollInterval: 60000,\n        context: {\n          headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n            Authorization: this.token,\n            token: this.token\n          })\n        },\n        variables: {\n          key: this.memberData.token,\n          role: this.memberData.role,\n          command: \"getMemberCrmData\",\n          payload: {\n            model: \"res.partner\",\n            query: {\n              id: this.memberData.crmId\n            },\n            fields: []\n          }\n        }\n      });\n      this.querySubscription = this.qry.valueChanges.subscribe(({\n        data,\n        loading\n      }) => {\n        setTimeout(() => {\n          this.loading = loading;\n          this.crmData = data.inStateRead[0];\n          this.getMembers();\n        });\n      }, error => {\n        this.loggerService.logData(false, 'quotesErr', error);\n      });\n    }\n  }\n  checkProductSet(item) {\n    return this.tableService.checkProductSet(item, this.productSet);\n  }\n  getMembers() {\n    this.qryMembers = this.apollo.watchQuery({\n      query: InStateRead,\n      pollInterval: 60000,\n      context: {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: this.memberData.token,\n          token: this.memberData.token\n        })\n      },\n      variables: {\n        key: this.memberData.token,\n        role: 'operator',\n        command: \"getOperatorMembers\",\n        payload: {\n          // email:this.operatorMem.email,\n        }\n      }\n    });\n    this.querySubscriptionMembers = this.qryMembers.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      setTimeout(() => {\n        this.loading = loading;\n        this.loggerService.logData(false, 'memberList', data.inStateRead);\n        this.members = data.inStateRead;\n        this.apollo.client.writeQuery({\n          query: OPERATOR_MEMBERS,\n          data: {\n            OPERATOR_MEMBERS: this.members\n          }\n        });\n        const qry = this.apollo.client.readQuery({\n          query: OPERATOR_MEMBERS\n        });\n        this.loggerService.logData(false, 'memberAccountUpdateQry', qry);\n      });\n    }, error => {\n      this.loggerService.logData(false, 'TopbarComponent:224', error);\n    });\n  }\n  openOnboardingModal() {\n    // this.onboardingService.displayModal('getStarted')\n  }\n  openDialog(item, minWidth = 850, minHeight = 400, maxHeight = 950) {\n    this.closeMegaMenuEvent.emit();\n    this.cancelEvent.emit();\n    if (item.dialog === 'standard') {\n      this.loggerService.logData(true, 'item', item);\n      if (item.controlType === 'repayLoansMember') {\n        // minWidth = 750\n        minHeight = 1200;\n        maxHeight = 2750;\n      } else if (item.controlType === 'sellTokensMember') {\n        // minWidth = 950\n        minHeight = 1200;\n        maxHeight = 2750;\n      } else if (item.controlType === 'createTrackCustom') {\n        // minWidth = 750\n        minHeight = 1200;\n        maxHeight = 2750;\n        item = {\n          ...item,\n          profile: {\n            key: 'administration-profile-asset',\n            label: 'Asset Profile',\n            icon: '',\n            show: true,\n            isMember: true,\n            product: \"all\",\n            actionType: 'Administration',\n            selectedAction: 'Create Asset Profile Member',\n            title: 'Profiles',\n            hasProductType: false,\n            productType: \"P2P\",\n            controlType: 'createProfile',\n            dialogType: 'wizardBase',\n            model: 'x_instate_asset_profile',\n            dialog: 'standard'\n          }\n        };\n      }\n      this.openStandardModal(item, minWidth, minHeight, maxHeight);\n    } else if (item.dialog === 'wizard') {\n      this.openWizard(item);\n    }\n  }\n  // openWizard(actionType:string, selectedAction:string, statusKey:string = null) {\n  //   this.onboardingService.openWizard(actionType, selectedAction, statusKey)\n  // }\n  openWizard(item) {\n    this.closeMegaMenuEvent.emit();\n    let dialogRef = this.dialog.open(ModalWizardDialogComponent, {\n      minWidth: '850px',\n      minHeight: '250px',\n      maxHeight: '850px',\n      disableClose: false,\n      data: item\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // //location.reload()\n    });\n  }\n  openStandardModal(payload, minWidth = 650, minHeight = 350, maxHeight = 550) {\n    let dialogRef = this.dialog.open(StandardModalComponent, {\n      minWidth: minWidth,\n      minHeight: minHeight,\n      maxHeight: maxHeight,\n      disableClose: false,\n      data: payload\n    });\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n  openPage(path) {\n    this.router.navigate([path]);\n  }\n};\n__decorate([Input(), Input()], MegaMenuComponent.prototype, \"memberData\", void 0);\n__decorate([Input()], MegaMenuComponent.prototype, \"members\", void 0);\n__decorate([Input()], MegaMenuComponent.prototype, \"menuType\", void 0);\n__decorate([Output()], MegaMenuComponent.prototype, \"closeMegaMenuEvent\", void 0);\n__decorate([Output()], MegaMenuComponent.prototype, \"settingsButtonClicked\", void 0);\n__decorate([Output()], MegaMenuComponent.prototype, \"mobileMenuButtonClicked\", void 0);\n__decorate([Output()], MegaMenuComponent.prototype, \"cancelEvent\", void 0);\nMegaMenuComponent = __decorate([Component({\n  selector: 'app-mega-menu',\n  templateUrl: './mega-menu.component.html',\n  styleUrls: ['./mega-menu.component.scss']\n})], MegaMenuComponent);\nexport { MegaMenuComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}