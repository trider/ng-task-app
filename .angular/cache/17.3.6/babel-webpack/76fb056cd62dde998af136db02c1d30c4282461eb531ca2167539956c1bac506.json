{"ast":null,"code":"var TopbarComponent_1;\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { LEFT_SIDEBAR_TYPE_CONDENSED, LEFT_SIDEBAR_TYPE_DEFAULT } from '../config/layout.model';\nimport { TopbarMenu } from './topbarMenu';\nimport { TopBarProfileOptions } from './topBarProfileOptions';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Languages } from './languages';\nimport { MENU_ADMIN } from './menu-admin';\nlet TopbarComponent = TopbarComponent_1 = class TopbarComponent {\n  constructor(router, eventService, memberService, apollo, loggerService, modalService, configService, dialog, operatorService, tablesService) {\n    this.router = router;\n    this.eventService = eventService;\n    this.memberService = memberService;\n    this.apollo = apollo;\n    this.loggerService = loggerService;\n    this.modalService = modalService;\n    this.configService = configService;\n    this.dialog = dialog;\n    this.operatorService = operatorService;\n    this.tablesService = tablesService;\n    this.layoutType = '';\n    this.leftSidebarTheme = 'light';\n    this.rowName = \"rowData\";\n    this.isRow = true;\n    this.memberId = 'member';\n    this.mobileMenuButtonClicked = new EventEmitter();\n    this.settingsButtonClicked = new EventEmitter();\n    this.textDir = 'rtl';\n    this.createMenuOptions = TopbarComponent_1;\n    this.megaMenuItems = [];\n    this.notificationList = [];\n    this.languages = Languages;\n    this.apps = TopbarMenu;\n    this.profileOptions = TopBarProfileOptions;\n    this.searchResults = [];\n    this.searchUsers = [];\n    this.memberData = null;\n    this.operatorData = null;\n    this.projectName = 'instate';\n    this.loggedInUser = null;\n    this.topnavCollapsed = false;\n    this.title = 'Details';\n    this.loading = false;\n    this.selectedTaskId = null;\n    this.memberWallet = null;\n    this.memberCash = 0;\n    this.selectedTaskIdAdmin = null;\n    this.row = null;\n    this.file = null;\n    this.members = null;\n    this.messages = null;\n    this.messageCount = 0;\n    this.messagesTotal = 0;\n    this.messagesMember = null;\n    this.messageCountMember = 0;\n    this.messagesTotalMember = 0;\n    this.messagesOperator = null;\n    this.messageCountOperator = 0;\n    this.messagesTotalOperator = 0;\n    this.flowablePath = null;\n    this.flowableCommandPath = null;\n    this.loanQuotes = null;\n    this.loanSaleQuotes = null;\n    this.pNoteRequests = null;\n    this.fundUnitRequests = null;\n    this.sNoteRequests = null;\n    this.tasks = null;\n    this.tasksAdmin = null;\n    this.approvedCount = 0;\n    this.approvedCountAdmin = 0;\n    this.updatingTask = false;\n    this.role = 'member';\n    this.progressVal = 0;\n    this.temp = null;\n    this.currQuoteId = null;\n    this.filterForm = new FormGroup({\n      search: new FormControl()\n    });\n    this.dltAccount = null;\n    this.accounts = null;\n    this.baseTableCols = TableMemberDataVaultInstate;\n    this.token = '1111111';\n    this.account = null;\n    this.memberAdminMenu = MENU_ADMIN;\n    this.balance = 0;\n    this.balanceDlt = 0;\n    this.isOnboarded = false;\n    this.isOnboardedWallet = false;\n    this.balanceColor = 'silver';\n    this.balanceForm = new FormGroup({\n      balance: new FormControl(0)\n    });\n    this.class = 'navbar-custom-payton';\n    document.addEventListener('fullscreenchange', this.exitHandler);\n    document.addEventListener(\"webkitfullscreenchange\", this.exitHandler);\n    document.addEventListener(\"mozfullscreenchange\", this.exitHandler);\n  }\n  ngOnInit() {}\n  changeSidebarWidth() {\n    if (document.body.hasAttribute('data-sidebar-size') && document.body.getAttribute('data-sidebar-size') === \"condensed\") {\n      this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_DEFAULT);\n    } else {\n      this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_CONDENSED);\n    }\n  }\n  exitHandler() {\n    let document = window.document;\n    if (!document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\n      document.body.classList.remove('fullscreen-enable');\n    }\n  }\n  toggleFullScreen() {\n    let document = window.document;\n    document.body.classList.toggle('fullscreen-enable');\n    let elem = document.querySelector('.maximize-icon');\n    if (elem.hasAttribute('data-toggle') && document.body.getAttribute('data-toggle') === \"fullscreen\") {\n      document.body.removeAttribute('data-toggle');\n    } else {\n      elem.setAttribute('data-toggle', 'fullscreen');\n    }\n    if (!document.fullscreenElement && /* alternative standard method */!document.mozFullScreenElement && !document.webkitFullscreenElement) {\n      // current working methods\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen();\n      } else if (document.documentElement.mozRequestFullScreen) {\n        document.documentElement.mozRequestFullScreen();\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        document.documentElement.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n      }\n    }\n  }\n  toggleRightSidebar() {\n    this.settingsButtonClicked.emit();\n  }\n  toggleMobileMenu(event) {\n    this.topnavCollapsed = !this.topnavCollapsed;\n    event.preventDefault();\n    this.mobileMenuButtonClicked.emit();\n  }\n  ngOnDestroy() {\n    try {\n      this.querySubscription.unsubscribe();\n    } catch (error) {}\n  }\n};\n__decorate([Input()], TopbarComponent.prototype, \"layoutType\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"leftSidebarTheme\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"rowName\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"isRow\", void 0);\n__decorate([Input()], TopbarComponent.prototype, \"memberId\", void 0);\n__decorate([Output()], TopbarComponent.prototype, \"mobileMenuButtonClicked\", void 0);\n__decorate([Output()], TopbarComponent.prototype, \"settingsButtonClicked\", void 0);\nTopbarComponent = TopbarComponent_1 = __decorate([Component({\n  selector: 'app-topbar',\n  templateUrl: './topbar.component.html',\n  styleUrls: ['./topbar.component.scss']\n})], TopbarComponent);\nexport { TopbarComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}