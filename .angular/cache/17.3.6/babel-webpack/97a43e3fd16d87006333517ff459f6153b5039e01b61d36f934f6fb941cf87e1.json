{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { InStateRead } from 'src/app/services/instate/schema/query';\nimport { InStateRun } from 'src/app/services/instate/schema/mutations';\nimport { StandardModalComponent } from 'src/app/components/dialogs/modals/standard-modal/standard-modal.component';\nlet NavMenuNotificationsComponent = class NavMenuNotificationsComponent {\n  constructor(router, memberService, apollo, loggerService, dialog, tablesService) {\n    this.router = router;\n    this.memberService = memberService;\n    this.apollo = apollo;\n    this.loggerService = loggerService;\n    this.dialog = dialog;\n    this.tablesService = tablesService;\n    this.role = null;\n    this.messageCountMemberEvent = new EventEmitter();\n    this.messageCountOperatorEvent = new EventEmitter();\n    this.loading = false;\n    this.memberData = null;\n    this.rows = {};\n    this.messages = null;\n    this.messageCount = 0;\n    this.messagesTotal = 0;\n    this.messagesMember = null;\n    this.messageCountMember = 0;\n    this.messagesTotalMember = 0;\n    this.messagesOperator = null;\n    this.messageCountOperator = 0;\n    this.messagesTotalOperator = 0;\n    this.token = null;\n    this.memberData = this.memberService.getMemberData();\n    this.token = localStorage.getItem('token');\n  }\n  ngOnInit() {\n    if (this.role === 'member') {\n      this.getMessages({\n        memberId: this.memberData.member,\n        projectName: this.memberData.projectName\n      });\n    } else if (this.role === 'operator') {\n      this.getMessages({\n        memberId: 'admin'\n      });\n    }\n  }\n  getMessages(payload) {\n    this.qry = this.apollo.watchQuery({\n      query: InStateRead,\n      pollInterval: 60000,\n      context: {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: this.token,\n          token: this.token\n        })\n      },\n      variables: {\n        key: this.memberData.key,\n        role: this.memberData.role,\n        command: \"getMemberMessages\",\n        payload: payload\n      }\n    });\n    this.querySubscription = this.qry.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      setTimeout(() => {\n        this.messages = data.inStateRead;\n        this.loggerService.logData(true, 'messages', this.messages);\n        if (this.role === 'member') {\n          this.messagesMember = this.messages.filter(res => res.memberId !== 'admin').sort((a, b) => new Date(a.startTime) > new Date(b.startTime) ? -1 : 1);\n          this.messagesTotal = this.messagesMember.length;\n          this.messages = this.messagesMember.slice(0, 10);\n          this.messageCountMemberEvent.emit(this.messagesTotal);\n        } else if (this.role === 'operator') {\n          this.messagesOperator = this.messages.filter(res => res.memberId === 'admin').sort((a, b) => new Date(a.startTime) > new Date(b.startTime) ? -1 : 1);\n          this.messagesTotal = this.messagesOperator.length;\n          this.messages = this.messagesOperator.slice(0, 10);\n          this.messageCountOperatorEvent.emit(this.messagesTotal);\n        }\n      });\n    }, error => {\n      this.loggerService.logData(false, 'MessagesTopbarComponent:293', error);\n      this.qry.refetch();\n    });\n  }\n  getRows(variables) {\n    let rows = {};\n    variables.map(reg => {\n      rows[reg.name] = reg.value;\n    });\n    return rows;\n  }\n  getRowValues(row) {\n    let data = {};\n    row.forEach((elem, i) => {\n      data[i] = elem;\n    });\n    return data[0];\n  }\n  openDialog(notification) {\n    if (notification.text.toLowerCase() === 'registration') {\n      this.openStandardModal(this.getRows(notification.requestData.payload.payLoad.variables), notification.text);\n    } else if (notification.text.toLowerCase().includes('wallet creation')) {\n      this.openStandardModal(this.getRows(notification.requestData.payload.variables), notification.text);\n    } else if (notification.text.toLowerCase().includes('cash withdrawal')) {\n      this.openStandardModal(this.getRows(notification.requestData.payload.variables), notification.text);\n    } else if (notification.text.toLowerCase().includes('yhd(a)')) {\n      this.openStandardModal(this.getRows(notification.requestData.payload.variables), notification.text);\n    } else if (notification.text.toLowerCase().includes('invoice financing')) {\n      this.openStandardModal(this.getRows(notification.requestData.payload.variables), notification.text);\n    } else if (notification.text.toLowerCase().includes('pay')) {\n      this.openStandardModal(this.getRows(notification.requestData.payload.variables), notification.text, 'details');\n    } else if (notification.text.toLowerCase().includes('onboarding')) {\n      this.openStandardModal(this.getRowValues(notification.requestData.payload.crmTicket.data), notification.text, 'details');\n    } else {\n      this.openStandardModal(notification, notification.text, 'details');\n    }\n  }\n  openStandardModal(item, title, controlType = 'notification') {\n    const dialogRef = this.dialog.open(StandardModalComponent, {\n      minWidth: 500,\n      maxHeight: 750,\n      disableClose: false,\n      data: {\n        controlType: controlType,\n        title: title,\n        row: item,\n        memberData: this.memberData\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n  openPage(path) {\n    if (path !== null && path.length > 0) this.router.navigate([path]);\n  }\n  deleteMessage(item, isRead = true) {\n    this.loggerService.logData(false, 'deleteMessageItem', item);\n    this.apollo.mutate({\n      mutation: InStateRun,\n      variables: {\n        key: this.memberData.token,\n        role: this.memberData.role,\n        command: \"memberDataUpdateById\",\n        payload: {\n          db: \"graphDB\",\n          collection: \"log\",\n          field: \"_id\",\n          id: item._id,\n          data: {\n            read: isRead\n          }\n        }\n      }\n    }).subscribe(resp => {\n      this.loggerService.logData(true, 'deleteMsg', resp);\n      this.qry.refetch();\n    }, error => {\n      this.loggerService.logData(false, 'deleteErr', error);\n    });\n  }\n  getCode() {\n    return this.tablesService.getCode(this.memberData.projectName, this.memberData.languageId);\n  }\n  getSymbol() {\n    return this.tablesService.getSymbol(this.memberData.projectName, this.memberData.languageId);\n  }\n  ngOnDestroy() {\n    this.querySubscription.unsubscribe();\n  }\n};\n__decorate([Input(), Input()], NavMenuNotificationsComponent.prototype, \"role\", void 0);\n__decorate([Output()], NavMenuNotificationsComponent.prototype, \"messageCountMemberEvent\", void 0);\n__decorate([Output()], NavMenuNotificationsComponent.prototype, \"messageCountOperatorEvent\", void 0);\nNavMenuNotificationsComponent = __decorate([Component({\n  selector: 'app-nav-menu-notifications',\n  templateUrl: './nav-menu-notifications.component.html',\n  styleUrls: ['./nav-menu-notifications.component.scss']\n})], NavMenuNotificationsComponent);\nexport { NavMenuNotificationsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}