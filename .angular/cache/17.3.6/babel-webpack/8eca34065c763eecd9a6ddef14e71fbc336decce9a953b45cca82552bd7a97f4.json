{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { findAllParent, findMenuItem } from '../../layout/shared/helper/utils';\nimport { MENU_ITEMS_INS_PRODUCTS,\n// MENU_ITEMS_INS_PRODUCTS_MEMBERS,\nMENU_ITEMS_INS_PRODUCTS_SEED } from 'src/app/layout/shared/config/menu-meta-ins-products';\nimport { MENU_ITEMS_PAYTON } from 'src/app/layout/shared/config/menu-meta-payton';\nimport { HttpHeaders } from '@angular/common/http';\nimport { InStateRead } from 'src/app/services/instate/schema/query';\n// import feather from \"feather-icons\";\nlet LeftSidebarComponent = class LeftSidebarComponent {\n  constructor(router, configurationService, authService, eventService, memberService, loggerService, tableService, apollo) {\n    this.configurationService = configurationService;\n    this.authService = authService;\n    this.eventService = eventService;\n    this.memberService = memberService;\n    this.loggerService = loggerService;\n    this.tableService = tableService;\n    this.apollo = apollo;\n    this.includeUserProfile = false;\n    this.memberData = null;\n    this.productName = 'insLending';\n    this.hasTwoToneIcons = false;\n    this.isInitialized = false;\n    this.leftSidebarClass = 'sidebar-enable';\n    this.activeMenuItems = [];\n    this.loggedInUser = {};\n    this.projectName = 'instate';\n    // menuItems: MenuItem[] = [];\n    this.menuItems = null;\n    this.menuItemsProducts = [];\n    this.menuList = [];\n    this.textDir = 'ltr';\n    this.productSet = null;\n    this.products = null;\n    this.httpOptions = null;\n    this.holdings = null;\n    this.memberData = this.memberService.getMemberData();\n    if (this.memberData !== null && this.memberData.languageId === 5) this.textDir = 'rtl';\n    this.projectName = localStorage.getItem('projectName');\n    this.productName = localStorage.getItem('productName');\n    this.productSet = JSON.parse(localStorage.getItem('productSet'));\n    this.getProductSet();\n    router.events.forEach(event => {\n      if (event instanceof NavigationEnd) {\n        this._activateMenu(); //actiavtes menu\n        this.hideMenu(); //hides leftbar on change of route\n      }\n    });\n  }\n  ngOnInit() {\n    //TODO: Automate menu creation\n    this.menuItems = MENU_ITEMS_INS_PRODUCTS_SEED.filter(res => res.show === true);\n    if (this.memberData.member !== 'member_operator_seed') this.menuItems = MENU_ITEMS_INS_PRODUCTS.filter(res => res.show === true);\n    // if(this.memberData.member === 'member_operator_seed')alert()\n    if (this.projectName === 'payton') this.menuItems = MENU_ITEMS_PAYTON.filter(res => res.show === true);\n    this.loggedInUser = this.authService.currentUser();\n    this.eventService.subscribe('toggleTwoToneIcons', enable => {\n      this.hasTwoToneIcons = enable;\n      if (this.hasTwoToneIcons) {\n        document.body.setAttribute(\"data-sidebar-icon\", \"twotones\");\n      } else {\n        document.body.removeAttribute(\"data-sidebar-icon\");\n      }\n    });\n    this.getHoldings();\n  }\n  getHoldings() {\n    this.qry = this.apollo.watchQuery({\n      query: InStateRead,\n      pollInterval: 5000,\n      context: {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: this.memberData.token,\n          token: this.memberData.token\n        })\n      },\n      variables: {\n        key: this.memberData.token,\n        // role: this.operatorData.role,\n        // command: \"getOperatorHoldings\",\n        role: 'member',\n        command: \"getHoldingsFundsMember\",\n        payload: {\n          projectName: this.memberData.projectName\n        }\n      }\n    });\n    this.querySubscription = this.qry.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      this.loading = loading;\n      this.holdings = data.inStateRead;\n      this.menuItems = this.menuItems.map(item => {\n        if (item.children !== undefined) {\n          item.children = item.children.map(child => {\n            console.log(`-${child.label}`);\n            if (child.label === 'Funds') {\n              child.children = [];\n              this.holdings.map(holding => {\n                let holdingName = holding.symbol.toLowerCase().replace(/ /g, '_');\n                child.children.push({\n                  key: `operator-financial-analytics-platform-analysis-funds-${holdingName}`,\n                  label: holding.symbol,\n                  labelHE: 'שארית ביניים',\n                  // icon: 'fe-pie-chart',\n                  parentKey: 'operator-financial-analytics-platform-analysis-funds',\n                  show: true,\n                  isInternal: true,\n                  isMember: false,\n                  isProduct: false,\n                  product: \"securitization\",\n                  link: `/operator/platform-analytics/redirect/claims/${holding.analysis}/${holding.symbol}`\n                });\n              });\n            }\n            return child;\n          });\n        }\n        return item;\n      });\n    }, error => {\n      this.loggerService.logData(false, 'OperatorAnalyticsInterimResidualComponentErr:89', error);\n    });\n  }\n  getProductSet() {\n    this.qryProducts = this.apollo.watchQuery({\n      query: InStateRead,\n      context: this.httpOptions,\n      pollInterval: 60000,\n      variables: {\n        key: localStorage.getItem('operatorToken'),\n        role: 'operator',\n        command: \"getProductSet\",\n        payload: {\n          account: \"5d21d64feeb4a107fc444b7d\"\n        }\n      }\n    });\n    this.querySubscriptionProducts = this.qryProducts.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      this.productSet = data.inStateRead;\n      if (this.productSet !== null) {\n        localStorage.setItem('productSet', JSON.stringify(this.productSet));\n      }\n    }, error => {\n      this.loggerService.logData(false, 'LoginComponent:getMemberDataErr', error);\n    });\n  }\n  ngOnChanges() {\n    if (this.includeUserProfile) {\n      document.body.setAttribute(\"data-sidebar-showuser\", \"true\");\n    } else {\n      document.body.removeAttribute(\"data-sidebar-showuser\");\n    }\n  }\n  checkProductSet(item) {\n    if (item.label === 'Funds') {\n      return this.tableService.checkProductSet(item, this.productSet);\n    } else if (item.label !== 'Funds') {\n      return this.tableService.checkProductSet(item, this.productSet);\n    }\n  }\n  getExternalLink(menu) {\n    if (menu.label === 'Core Banking') {\n      return this.configurationService.config.externalLinks.coreBanking;\n    } else if (menu.label === 'Smart Contracting') {\n      return this.configurationService.config.externalLinks.smartContracting;\n    } else if (menu.label === 'IDM') {\n      return this.configurationService.config.externalLinks.idm;\n    } else if (menu.label === 'Admin') {\n      return this.configurationService.config.externalLinks.admin;\n    } else if (menu.label === 'Modeler') {\n      return this.configurationService.config.externalLinks['modeler'];\n    } else if (menu.label === 'Tasks') {\n      return this.configurationService.config.externalLinks.task;\n    } else if (menu.label === 'CRM') {\n      return `${this.configurationService.config.urlWebApp}:8069`;\n      // return this.configurationService.config.externalLinks.engagement\n    } else if (menu.label === 'Documents') {\n      return this.configurationService.config.externalLinks.documents;\n    } else if (menu.label === 'Registry') {\n      return this.configurationService.config.externalLinks.registry;\n    } else if (menu.label === 'DLT') {\n      return this.configurationService.config.externalLinks.dlt;\n    } else if (menu.label === 'InState') {\n      return this.configurationService.config.externalLinks.instate;\n    }\n    //  else if(menu.label === 'Status'){\n    //   return this.configurationService.config.externalLinks.status\n    //  }\n    else if (menu.label === 'Control') {\n      return `${this.configurationService.config.urlWebApp}:2052`;\n      // return this.configurationService.config.externalLinks.status\n    } else if (menu.label === 'Monitoring') {\n      return `${this.configurationService.config.urlWebApp}:2053`;\n    } else if (menu.label === 'Alerts') {\n      return `${this.configurationService.config.urlWebApp}:9093`;\n    } else if (menu.label === 'Dashboard') {\n      return `${this.configurationService.config.urlWebApp}:2060`;\n    }\n  }\n  /**\n   * On view init - activating menuitems\n   */\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this._activateMenu();\n    });\n    // feather.replace();\n  }\n  /**\n   * initialize menuitems\n   */\n  // initMenu(): void {\n  //   if(this.memberData.role === 'operator'){\n  //     this.menuItems = MENU_ITEMS;\n  //   }\n  //   else{\n  //     this.menuItems = MENU_ITEMS_MEMBER;\n  //   }\n  // }\n  /**\n   * activates menu\n   */\n  _activateMenu() {\n    const div = document.getElementById('side-menu');\n    let matchingMenuItem = null;\n    if (div) {\n      let items = div.getElementsByClassName('side-nav-link-ref');\n      for (let i = 0; i < items.length; ++i) {\n        if (window.location.pathname === items[i].pathname) {\n          matchingMenuItem = items[i];\n          break;\n        }\n      }\n      if (matchingMenuItem) {\n        const mid = matchingMenuItem.getAttribute('data-menu-key');\n        const activeMt = findMenuItem(this.menuItems, mid);\n        if (activeMt) {\n          const matchingObjs = [activeMt['key'], ...findAllParent(this.menuItems, activeMt)];\n          this.activeMenuItems = matchingObjs;\n          this.menuItems.forEach(menu => {\n            menu.collapsed = !matchingObjs.includes(menu.key);\n          });\n        }\n      }\n    }\n  }\n  /**\n   * toggles open menu\n   * @param menuItem clicked menuitem\n   * @param collapse collpase instance\n   */\n  toggleMenuItem(menuItem, collapse) {\n    collapse.toggle();\n    let openMenuItems;\n    if (!menuItem.collapsed) {\n      openMenuItems = [menuItem['key'], ...findAllParent(this.menuItems, menuItem)];\n      this.menuItems.forEach(menu => {\n        if (!openMenuItems.includes(menu.key)) {\n          menu.collapsed = true;\n        }\n      });\n    }\n  }\n  /**\n   * Returns true or false if given menu item has child or not\n   * @param item menuItem\n   */\n  hasSubmenu(menu) {\n    return menu.children ? true : false;\n  }\n  /**\n   * Hides the menubar\n   */\n  hideMenu() {\n    document.body.classList.remove('sidebar-enable');\n  }\n};\n__decorate([Input(), Input()], LeftSidebarComponent.prototype, \"navClasses\", void 0);\n__decorate([Input()], LeftSidebarComponent.prototype, \"includeUserProfile\", void 0);\n__decorate([Input()], LeftSidebarComponent.prototype, \"memberData\", void 0);\nLeftSidebarComponent = __decorate([Component({\n  selector: 'app-left-sidebar',\n  templateUrl: './left-sidebar.component.html',\n  styleUrls: ['./left-sidebar.component.scss']\n})], LeftSidebarComponent);\nexport { LeftSidebarComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}