{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { MENU_ITEMS_UPECOS } from 'src/app/layout/shared/config/menu-meta-upecos';\nimport { findAllParent, findMenuItem } from '../../shared/helper/utils';\nimport { MENU_ITEMS_INS_PRODUCTS } from 'src/app/layout/shared/config/menu-meta-ins-products';\nimport { InStateRead } from 'src/app/services/instate/schema/query';\nlet TopnavComponent = class TopnavComponent {\n  constructor(router, memberService, apollo, loggerService, tableService) {\n    this.router = router;\n    this.memberService = memberService;\n    this.apollo = apollo;\n    this.loggerService = loggerService;\n    this.tableService = tableService;\n    this.memberData = null;\n    this.showMobileMenu = true;\n    this.menuItems = [];\n    this.activeMenuItems = [];\n    this.chunkSize = 7;\n    this.textDir = 'ltr';\n    this.projectName = 'instate';\n    this.productName = 'insLending';\n    this.productSet = null;\n    this.products = null;\n    this.httpOptions = null;\n    this.memberData = this.memberService.getMemberData();\n    this.projectName = localStorage.getItem('projectName');\n    this.productName = localStorage.getItem('productName');\n    this.productSet = JSON.parse(localStorage.getItem('productSet'));\n    router.events.forEach(event => {\n      if (event instanceof NavigationEnd) {\n        this._activateMenu();\n      }\n    });\n  }\n  getProductSet() {\n    this.qryProducts = this.apollo.watchQuery({\n      query: InStateRead,\n      context: this.httpOptions,\n      pollInterval: 2500,\n      variables: {\n        key: localStorage.getItem('operatorToken'),\n        role: 'operator',\n        command: \"getProductSet\",\n        payload: {\n          account: \"5d21d64feeb4a107fc444b7d\"\n        }\n      }\n    });\n    this.querySubscriptionProducts = this.qryProducts.valueChanges.subscribe(({\n      data,\n      loading\n    }) => {\n      this.productSet = data.inStateRead;\n      if (this.productSet !== null) {\n        localStorage.setItem('productSet', JSON.stringify(this.productSet));\n        // // this.products = this.productSet.products.map( product =>{\n        // //   return { name:product.title.toLowerCase(), value:product.isVisible }\n        // // })\n        // this.loggerService.logData(true, 'products', this.productSet)\n      }\n    }, error => {\n      this.loggerService.logData(false, 'LoginComponent:getMemberDataErr', error);\n    });\n  }\n  ngOnInit() {\n    this.menuItems = MENU_ITEMS_INS_PRODUCTS.filter(res => res.isMember && res.show);\n    // if(this.productName==='insWallet')this.menuItems = MENU_ITEMS_INS_WALLET.filter(res => res.isMember && res.show)\n    if (this.memberData.projectName === 'upecos') this.menuItems = MENU_ITEMS_UPECOS.filter(res => res.isMember && res.show);\n  }\n  /**\n   * On view init - activating menuitems\n   */\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this._activateMenu();\n    });\n  }\n  checkProductSet(item) {\n    return this.tableService.checkProductSet(item, this.productSet);\n  }\n  /**\n   * Initializing menuitems and controlling how many menu items can be displayed in it\n   */\n  // initMenu(): void {\n  //   this.menuItems = MENU_ITEMS.filter(res => res.isMember );\n  //   this.menuItemsRTL = MENU_ITEMS_RTL.filter(res => res.isMember );\n  //   // this.menuItems = HORIZONTAL_MENU_ITEMS;\n  // }\n  // split array for chumk size\n  splitArray(array, chunkSize) {\n    const splittedArray = Array(Math.ceil(array.length / chunkSize)).fill(1).map((_, index) => index * chunkSize).map(begin => array.slice(begin, begin + chunkSize));\n    return splittedArray;\n  }\n  /**\n   * Returns true or false if given menu item has child or not\n   * @param item menuItem\n   */\n  hasSubmenu(menu) {\n    return (menu.children ? true : false) ? menu.show ? true : false : false;\n  }\n  /**\n  * checks if menuitem has grand children and controls rendering mega menu\n  * @param menuItem menu item\n  */\n  hasGrandChildren(menuItem) {\n    let hasGrandChild = menuItem.children && menuItem.children.filter(child => child.children?.length && child.children);\n    return hasGrandChild.length > 0;\n  }\n  /**\n   *  Toggle the dropdown menu\n   */\n  toggleMenuItem(menuItem) {\n    menuItem.collapsed = !menuItem.collapsed;\n    let openMenuItems;\n    if (!menuItem.collapsed) {\n      openMenuItems = [menuItem['key'], ...findAllParent(this.menuItems, menuItem)];\n      // close other open menu\n      this.menuItems.forEach(menu => {\n        if (!openMenuItems.includes(menu.key)) {\n          menu.collapsed = true;\n        }\n      });\n    }\n  }\n  /**\n   * activate the menuitems\n   */\n  _activateMenu() {\n    const div = document.getElementById('topnav-menu-content');\n    let matchingMenuItem = null;\n    if (div) {\n      let items = div.getElementsByClassName('nav-link-ref');\n      for (let i = 0; i < items.length; ++i) {\n        if (window.location.pathname === items[i].pathname) {\n          matchingMenuItem = items[i];\n          break;\n        }\n      }\n      if (matchingMenuItem) {\n        const mid = matchingMenuItem.getAttribute('data-menu-key');\n        const activeMt = findMenuItem(this.menuItems, mid);\n        if (activeMt) {\n          this.activeMenuItems = [activeMt['key'], ...findAllParent(this.menuItems, activeMt)];\n        }\n      }\n    }\n    // close all menu\n    this.menuItems.forEach(menu => {\n      menu.collapsed = true;\n    });\n  }\n};\n__decorate([Input(), Input()], TopnavComponent.prototype, \"memberData\", void 0);\n__decorate([Input()], TopnavComponent.prototype, \"showMobileMenu\", void 0);\nTopnavComponent = __decorate([Component({\n  selector: 'app-horizontal-topnav',\n  templateUrl: './topnav.component.html',\n  styleUrls: ['./topnav.component.scss']\n})], TopnavComponent);\nexport { TopnavComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}